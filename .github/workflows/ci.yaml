name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - Integrations
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        working-directory: backend
        run: go mod download
      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l backend/ | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'gofmt -s -w backend/'"
            gofmt -s -l backend/
            exit 1
          fi
      - name: Run tests
        working-directory: backend
        run: go test -v -short ./...
      - name: Check test coverage
        working-directory: backend
        run: |
          go test -coverprofile=coverage.out -short ./...
          go tool cover -func=coverage.out
  build:
    name: Build Project
    runs-on: ubuntu-latest

    services:
      postgres_users:
        image: postgres:latest
        env:
          POSTGRES_USER: testuser_users
          POSTGRES_PASSWORD: testpass_users
          POSTGRES_DB: testdb_users
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres_universities:
        image: postgres:latest
        env:
          POSTGRES_USER: testuser_universities
          POSTGRES_PASSWORD: testpass_universities
          POSTGRES_DB: testdb_universities
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -p 5432"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Build Docker Images
        working-directory: backend
        run: |
          docker-compose -f ./docker-compose.yml build user_service analytic_service