// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: analytic.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type University struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region         string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	BudgetPoints   int32                  `protobuf:"varint,3,opt,name=BudgetPoints,proto3" json:"BudgetPoints,omitempty"`
	ContractPoints int32                  `protobuf:"varint,4,opt,name=ContractPoints,proto3" json:"ContractPoints,omitempty"`
	Cost           int64                  `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Prestige       int32                  `protobuf:"varint,6,opt,name=prestige,proto3" json:"prestige,omitempty"`
	Rank           float32                `protobuf:"fixed32,7,opt,name=rank,proto3" json:"rank,omitempty"`
	Quality        int32                  `protobuf:"varint,8,opt,name=quality,proto3" json:"quality,omitempty"`
	Dormitory      bool                   `protobuf:"varint,9,opt,name=dormitory,proto3" json:"dormitory,omitempty"`
	Labs           bool                   `protobuf:"varint,10,opt,name=labs,proto3" json:"labs,omitempty"`
	Sport          bool                   `protobuf:"varint,11,opt,name=sport,proto3" json:"sport,omitempty"`
	Scholarship    int32                  `protobuf:"varint,12,opt,name=scholarship,proto3" json:"scholarship,omitempty"`
	Relevancy      float64                `protobuf:"fixed64,13,opt,name=relevancy,proto3" json:"relevancy,omitempty"`
	Site           string                 `protobuf:"bytes,14,opt,name=site,proto3" json:"site,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *University) Reset() {
	*x = University{}
	mi := &file_analytic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *University) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*University) ProtoMessage() {}

func (x *University) ProtoReflect() protoreflect.Message {
	mi := &file_analytic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use University.ProtoReflect.Descriptor instead.
func (*University) Descriptor() ([]byte, []int) {
	return file_analytic_proto_rawDescGZIP(), []int{0}
}

func (x *University) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *University) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *University) GetBudgetPoints() int32 {
	if x != nil {
		return x.BudgetPoints
	}
	return 0
}

func (x *University) GetContractPoints() int32 {
	if x != nil {
		return x.ContractPoints
	}
	return 0
}

func (x *University) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *University) GetPrestige() int32 {
	if x != nil {
		return x.Prestige
	}
	return 0
}

func (x *University) GetRank() float32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *University) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *University) GetDormitory() bool {
	if x != nil {
		return x.Dormitory
	}
	return false
}

func (x *University) GetLabs() bool {
	if x != nil {
		return x.Labs
	}
	return false
}

func (x *University) GetSport() bool {
	if x != nil {
		return x.Sport
	}
	return false
}

func (x *University) GetScholarship() int32 {
	if x != nil {
		return x.Scholarship
	}
	return 0
}

func (x *University) GetRelevancy() float64 {
	if x != nil {
		return x.Relevancy
	}
	return 0
}

func (x *University) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type AnalyzeRequest struct {
	state                                 protoimpl.MessageState `protogen:"open.v1"`
	RatingToPrestige                      int32                  `protobuf:"varint,1,opt,name=ratingToPrestige,proto3" json:"ratingToPrestige,omitempty"`
	RatingToEducationQuality              int32                  `protobuf:"varint,2,opt,name=ratingToEducationQuality,proto3" json:"ratingToEducationQuality,omitempty"`
	RatingToScholarshipPrograms           int32                  `protobuf:"varint,3,opt,name=ratingToScholarshipPrograms,proto3" json:"ratingToScholarshipPrograms,omitempty"`
	PrestigeToEducationQuality            int32                  `protobuf:"varint,4,opt,name=prestigeToEducationQuality,proto3" json:"prestigeToEducationQuality,omitempty"`
	PrestigeToScholarshipPrograms         int32                  `protobuf:"varint,5,opt,name=prestigeToScholarshipPrograms,proto3" json:"prestigeToScholarshipPrograms,omitempty"`
	EducationQualityToScholarshipPrograms int32                  `protobuf:"varint,6,opt,name=educationQualityToScholarshipPrograms,proto3" json:"educationQualityToScholarshipPrograms,omitempty"`
	Dormitory                             bool                   `protobuf:"varint,7,opt,name=dormitory,proto3" json:"dormitory,omitempty"`
	ScientificLabs                        bool                   `protobuf:"varint,8,opt,name=scientificLabs,proto3" json:"scientificLabs,omitempty"`
	SportsInfrastructure                  bool                   `protobuf:"varint,9,opt,name=sportsInfrastructure,proto3" json:"sportsInfrastructure,omitempty"`
	EducationCost                         int64                  `protobuf:"varint,10,opt,name=educationCost,proto3" json:"educationCost,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	mi := &file_analytic_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytic_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_analytic_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeRequest) GetRatingToPrestige() int32 {
	if x != nil {
		return x.RatingToPrestige
	}
	return 0
}

func (x *AnalyzeRequest) GetRatingToEducationQuality() int32 {
	if x != nil {
		return x.RatingToEducationQuality
	}
	return 0
}

func (x *AnalyzeRequest) GetRatingToScholarshipPrograms() int32 {
	if x != nil {
		return x.RatingToScholarshipPrograms
	}
	return 0
}

func (x *AnalyzeRequest) GetPrestigeToEducationQuality() int32 {
	if x != nil {
		return x.PrestigeToEducationQuality
	}
	return 0
}

func (x *AnalyzeRequest) GetPrestigeToScholarshipPrograms() int32 {
	if x != nil {
		return x.PrestigeToScholarshipPrograms
	}
	return 0
}

func (x *AnalyzeRequest) GetEducationQualityToScholarshipPrograms() int32 {
	if x != nil {
		return x.EducationQualityToScholarshipPrograms
	}
	return 0
}

func (x *AnalyzeRequest) GetDormitory() bool {
	if x != nil {
		return x.Dormitory
	}
	return false
}

func (x *AnalyzeRequest) GetScientificLabs() bool {
	if x != nil {
		return x.ScientificLabs
	}
	return false
}

func (x *AnalyzeRequest) GetSportsInfrastructure() bool {
	if x != nil {
		return x.SportsInfrastructure
	}
	return false
}

func (x *AnalyzeRequest) GetEducationCost() int64 {
	if x != nil {
		return x.EducationCost
	}
	return 0
}

type AnalyzeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Speciality    string                 `protobuf:"bytes,1,opt,name=speciality,proto3" json:"speciality,omitempty"`
	Universities  []*University          `protobuf:"bytes,2,rep,name=universities,proto3" json:"universities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	mi := &file_analytic_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytic_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_analytic_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeResponse) GetSpeciality() string {
	if x != nil {
		return x.Speciality
	}
	return ""
}

func (x *AnalyzeResponse) GetUniversities() []*University {
	if x != nil {
		return x.Universities
	}
	return nil
}

var File_analytic_proto protoreflect.FileDescriptor

var file_analytic_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x02,
	0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x72, 0x6d, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x6f, 0x72, 0x6d, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6c, 0x61, 0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0xb6,
	0x04, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72, 0x65,
	0x73, 0x74, 0x69, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x70,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1d, 0x70,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x63,
	0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x54, 0x0a, 0x25, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x25, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x72, 0x6d, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x6f, 0x72, 0x6d,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x32,
	0x62, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x07, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x42, 0x26, 0x92, 0x41, 0x12, 0x1a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
	0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x5a, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_analytic_proto_rawDescOnce sync.Once
	file_analytic_proto_rawDescData []byte
)

func file_analytic_proto_rawDescGZIP() []byte {
	file_analytic_proto_rawDescOnce.Do(func() {
		file_analytic_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_analytic_proto_rawDesc), len(file_analytic_proto_rawDesc)))
	})
	return file_analytic_proto_rawDescData
}

var file_analytic_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_analytic_proto_goTypes = []any{
	(*University)(nil),      // 0: api.University
	(*AnalyzeRequest)(nil),  // 1: api.AnalyzeRequest
	(*AnalyzeResponse)(nil), // 2: api.AnalyzeResponse
}
var file_analytic_proto_depIdxs = []int32{
	0, // 0: api.AnalyzeResponse.universities:type_name -> api.University
	1, // 1: api.Analytic.Analyze:input_type -> api.AnalyzeRequest
	2, // 2: api.Analytic.Analyze:output_type -> api.AnalyzeResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_analytic_proto_init() }
func file_analytic_proto_init() {
	if File_analytic_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_analytic_proto_rawDesc), len(file_analytic_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analytic_proto_goTypes,
		DependencyIndexes: file_analytic_proto_depIdxs,
		MessageInfos:      file_analytic_proto_msgTypes,
	}.Build()
	File_analytic_proto = out.File
	file_analytic_proto_goTypes = nil
	file_analytic_proto_depIdxs = nil
}
